/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Eth Beacon Node API
 * API specification for the beacon node, which enables users to query and participate in Ethereum 2.0 phase 0 beacon chain.  All requests by default send and receive JSON, and as such should have either or both of the \"Content-Type: application/json\" and \"Accept: application/json\" headers.  In addition, some requests can return data in the SSZ format.  To indicate that SSZ data is required in response to a request the header \"Accept: application/octet-stream\" should be sent.  Note that only a subset of requests can respond with data in SSZ format; these are noted in each individual request.  API endpoints are individually versioned.  As such, there is no direct relationship between all v1 endpoints, all v2 endpoints, _etc._ and no such relationship should be inferred.  All JSON responses return the requested data under a `data` key in the top level of their response.  Additional metadata may or may not be present in other keys at the top level of the response, dependent on the endpoint.  The rules that require an increase in version number are as follows:    - no field that is listed in an endpoint shall be removed without an increase in the version number   - no field that is listed in an endpoint shall be altered in terms of format (_e.g._ from a string to an array) without an     increase in the version number  Note that it is possible for a field to be added to an endpoint's data or metadata without an increase in the version number.
 *
 * OpenAPI spec version: v2.5.0 - Ethereum Proof-of-Stake Consensus Specification v1.4.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig, AxiosError } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { GetAttestationsRewardsResponse } from '../models';
import { GetBlockRewardsResponse } from '../models';
import { GetSyncCommitteeRewardsResponse } from '../models';
import { InlineResponse404 } from '../models';
/**
 * RewardsApi - axios parameter creator
 * @export
 */
globalAxios.defaults.timeout = 60000;
export const RewardsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Retrieve attestation reward info for validators specified by array of public keys or validator index. If no array is provided, return reward info for every validator.
     * @summary Get attestations rewards
     * @param {any} epoch The epoch to get rewards info from
     * @param {any} [body] An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAttestationsRewards: async (epoch: any, body?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'epoch' is not null or undefined
      if (epoch === null || epoch === undefined) {
        throw new RequiredError(
          'epoch',
          'Required parameter epoch was null or undefined when calling getAttestationsRewards.'
        );
      }
      const localVarPath = `/eth/v1/beacon/rewards/attestations/{epoch}`.replace(
        `{${'epoch'}}`,
        encodeURIComponent(String(epoch))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     * Retrieve block reward info for a single block
     * @summary Get block rewards
     * @param {any} blockId Block identifier. Can be one of: \&quot;head\&quot; (canonical head in node&#x27;s view), \&quot;genesis\&quot;, \&quot;finalized\&quot;, \\&lt;slot\\&gt;, \\&lt;hex encoded blockRoot with 0x prefix\\&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockRewards: async (blockId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'blockId' is not null or undefined
      if (blockId === null || blockId === undefined) {
        throw new RequiredError(
          'blockId',
          'Required parameter blockId was null or undefined when calling getBlockRewards.'
        );
      }
      const localVarPath = `/eth/v1/beacon/rewards/blocks/{block_id}`.replace(
        `{${'block_id'}}`,
        encodeURIComponent(String(blockId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'GET',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    },
    /**
     * Retrieves rewards info for sync committee members specified by array of public keys or validator index. If no array is provided, return reward info for every committee member.
     * @summary Get sync committee rewards
     * @param {any} blockId Block identifier. Can be one of: \&quot;head\&quot; (canonical head in node&#x27;s view), \&quot;genesis\&quot;, \&quot;finalized\&quot;, \\&lt;slot\\&gt;, \\&lt;hex encoded blockRoot with 0x prefix\\&gt;.
     * @param {any} [body] An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSyncCommitteeRewards: async (
      blockId: any,
      body?: any,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'blockId' is not null or undefined
      if (blockId === null || blockId === undefined) {
        throw new RequiredError(
          'blockId',
          'Required parameter blockId was null or undefined when calling getSyncCommitteeRewards.'
        );
      }
      const localVarPath = `/eth/v1/beacon/rewards/sync_committee/{block_id}`.replace(
        `{${'block_id'}}`,
        encodeURIComponent(String(blockId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, 'https://example.com');
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions: AxiosRequestConfig = {
        method: 'POST',
        ...baseOptions,
        ...options
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      const query = new URLSearchParams(localVarUrlObj.search);
      for (const key in localVarQueryParameter) {
        query.set(key, localVarQueryParameter[key]);
      }
      for (const key in options.params) {
        query.set(key, options.params[key]);
      }
      localVarUrlObj.search = new URLSearchParams(query).toString();
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers
      };
      const needsSerialization =
        typeof body !== 'string' || localVarRequestOptions.headers['Content-Type'] === 'application/json';
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : body || '';

      return {
        url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
        options: localVarRequestOptions
      };
    }
  };
};

/**
 * RewardsApi - functional programming interface
 * @export
 */
export const RewardsApiFp = function (configuration?: Configuration) {
  return {
    /**
     * Retrieve attestation reward info for validators specified by array of public keys or validator index. If no array is provided, return reward info for every validator.
     * @summary Get attestations rewards
     * @param {any} epoch The epoch to get rewards info from
     * @param {any} [body] An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAttestationsRewards(
      epoch: any,
      body?: any,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetAttestationsRewardsResponse>>> {
      const localVarAxiosArgs = await RewardsApiAxiosParamCreator(configuration).getAttestationsRewards(
        epoch,
        body,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieve block reward info for a single block
     * @summary Get block rewards
     * @param {any} blockId Block identifier. Can be one of: \&quot;head\&quot; (canonical head in node&#x27;s view), \&quot;genesis\&quot;, \&quot;finalized\&quot;, \\&lt;slot\\&gt;, \\&lt;hex encoded blockRoot with 0x prefix\\&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlockRewards(
      blockId: any,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetBlockRewardsResponse>>> {
      const localVarAxiosArgs = await RewardsApiAxiosParamCreator(configuration).getBlockRewards(blockId, options);
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     * Retrieves rewards info for sync committee members specified by array of public keys or validator index. If no array is provided, return reward info for every committee member.
     * @summary Get sync committee rewards
     * @param {any} blockId Block identifier. Can be one of: \&quot;head\&quot; (canonical head in node&#x27;s view), \&quot;genesis\&quot;, \&quot;finalized\&quot;, \\&lt;slot\\&gt;, \\&lt;hex encoded blockRoot with 0x prefix\\&gt;.
     * @param {any} [body] An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSyncCommitteeRewards(
      blockId: any,
      body?: any,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GetSyncCommitteeRewardsResponse>>> {
      const localVarAxiosArgs = await RewardsApiAxiosParamCreator(configuration).getSyncCommitteeRewards(
        blockId,
        body,
        options
      );
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs: AxiosRequestConfig = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url
        };
        return axios.request(axiosRequestArgs);
      };
    }
  };
};

/**
 * RewardsApi - factory interface
 * @export
 */
export const RewardsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
     * Retrieve attestation reward info for validators specified by array of public keys or validator index. If no array is provided, return reward info for every validator.
     * @summary Get attestations rewards
     * @param {any} epoch The epoch to get rewards info from
     * @param {any} [body] An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAttestationsRewards(
      epoch: any,
      body?: any,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<GetAttestationsRewardsResponse>> {
      return RewardsApiFp(configuration)
        .getAttestationsRewards(epoch, body, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Retrieve block reward info for a single block
     * @summary Get block rewards
     * @param {any} blockId Block identifier. Can be one of: \&quot;head\&quot; (canonical head in node&#x27;s view), \&quot;genesis\&quot;, \&quot;finalized\&quot;, \\&lt;slot\\&gt;, \\&lt;hex encoded blockRoot with 0x prefix\\&gt;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBlockRewards(blockId: any, options?: AxiosRequestConfig): Promise<AxiosResponse<GetBlockRewardsResponse>> {
      return RewardsApiFp(configuration)
        .getBlockRewards(blockId, options)
        .then(request => request(axios, basePath));
    },
    /**
     * Retrieves rewards info for sync committee members specified by array of public keys or validator index. If no array is provided, return reward info for every committee member.
     * @summary Get sync committee rewards
     * @param {any} blockId Block identifier. Can be one of: \&quot;head\&quot; (canonical head in node&#x27;s view), \&quot;genesis\&quot;, \&quot;finalized\&quot;, \\&lt;slot\\&gt;, \\&lt;hex encoded blockRoot with 0x prefix\\&gt;.
     * @param {any} [body] An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSyncCommitteeRewards(
      blockId: any,
      body?: any,
      options?: AxiosRequestConfig
    ): Promise<AxiosResponse<GetSyncCommitteeRewardsResponse>> {
      return RewardsApiFp(configuration)
        .getSyncCommitteeRewards(blockId, body, options)
        .then(request => request(axios, basePath));
    }
  };
};

/**
 * RewardsApi - object-oriented interface
 * @export
 * @class RewardsApi
 * @extends {BaseAPI}
 */
export class RewardsApi extends BaseAPI {
  /**
   * Retrieve attestation reward info for validators specified by array of public keys or validator index. If no array is provided, return reward info for every validator.
   * @summary Get attestations rewards
   * @param {any} epoch The epoch to get rewards info from
   * @param {any} [body] An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RewardsApi
   */
  public async getAttestationsRewards(
    epoch: any,
    body?: any,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<GetAttestationsRewardsResponse>> {
    return RewardsApiFp(this.configuration)
      .getAttestationsRewards(epoch, body, options)
      .then(request => request(this.axios, this.basePath))
      .catch((e: AxiosError) => console.log('att err', e.message, e.code, e.request));
  }
  /**
   * Retrieve block reward info for a single block
   * @summary Get block rewards
   * @param {any} blockId Block identifier. Can be one of: \&quot;head\&quot; (canonical head in node&#x27;s view), \&quot;genesis\&quot;, \&quot;finalized\&quot;, \\&lt;slot\\&gt;, \\&lt;hex encoded blockRoot with 0x prefix\\&gt;.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RewardsApi
   */
  public async getBlockRewards(
    blockId: any,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<GetBlockRewardsResponse>> {
    return RewardsApiFp(this.configuration)
      .getBlockRewards(blockId, options)
      .then(request => request(this.axios, this.basePath));
  }
  /**
   * Retrieves rewards info for sync committee members specified by array of public keys or validator index. If no array is provided, return reward info for every committee member.
   * @summary Get sync committee rewards
   * @param {any} blockId Block identifier. Can be one of: \&quot;head\&quot; (canonical head in node&#x27;s view), \&quot;genesis\&quot;, \&quot;finalized\&quot;, \\&lt;slot\\&gt;, \\&lt;hex encoded blockRoot with 0x prefix\\&gt;.
   * @param {any} [body] An array of either hex encoded public key (any bytes48 with 0x prefix) or validator index
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RewardsApi
   */
  public async getSyncCommitteeRewards(
    blockId: any,
    body?: any,
    options?: AxiosRequestConfig
  ): Promise<AxiosResponse<GetSyncCommitteeRewardsResponse>> {
    return RewardsApiFp(this.configuration)
      .getSyncCommitteeRewards(blockId, body, options)
      .then(request => request(this.axios, this.basePath));
  }
}
